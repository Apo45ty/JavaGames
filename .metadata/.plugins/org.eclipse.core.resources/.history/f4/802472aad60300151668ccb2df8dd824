package com.apo45ty.minefront.graphics;

import java.util.*;

import com.apo45ty.minefront.*;
import com.apo45ty.minefront.input.*;

public class Render3D extends Render {
	public static final double RENDER_FAR_DISTANCE = 7000;
	public static final boolean SHARP_RENDER_CUTOFF = false;
	public double CEILING_HEIGHT = 80;
	public double FLOOR_DISTANCE = 8;
	public double[] zBuffer;
	private double RUNNING_EXTRA_WABLE;
	
	
	public Render3D(int width, int height) {
		super(width, height);
		zBuffer = new double[width*height];
	}
	
	public void floor(Game game){
		double forward = game.controls.z;
		double right = game.controls.x;
		double rotation = game.controls.rotation;
		if(Controller.idle)
			rotation = Math.sin(game.Time/4000.0)*0.1;
		
		double cos = Math.cos(rotation);
		double sin = Math.sin(rotation);
		//double up = Math.sin(game.Time/700.0)*2;
		double up = Math.sin(game.controls.y);
		double wableEffect  = Math.sin(game.Time/(70.0)*0.5);
		if(Controller.crouchWalking)
			wableEffect  = Math.sin(game.Time/(100.0))*0.3;
		if(Controller.running)
			wableEffect  = Math.sin(game.Time)*0.7;
		for(int y=0;y<height;y++){
			double ceiling = (y -height /2.0) / height;	
			double z = (FLOOR_DISTANCE+up) / ceiling;
			if(Controller.walking)
			 z = (FLOOR_DISTANCE+up+wableEffect) / ceiling;
			if(ceiling < 0 ){
				z = (CEILING_HEIGHT -up)/ -ceiling;
				if(Controller.walking)
					z = (CEILING_HEIGHT -up -wableEffect)/ -ceiling;
			}
			for(int x=0;x<width;x++){
				double xDepth = (x - width /2.0) / height ;
				xDepth *= z;
				int xX = (int)((xDepth*cos-z*sin)+forward);
				int yY = (int)((z*cos+xDepth*sin)+right);
				zBuffer[x+y*width] = z;
				pixels[x+y*width] = Texture.floor.pixels[(xX&7)+(yY&7)*Texture.floor.length];//((xX&15)*16)|((yY&15)*16) << 8;
				
				if(SHARP_RENDER_CUTOFF&& z > RENDER_FAR_DISTANCE ){
						pixels[x+y*width] = 0;
				}
			}
		}
		
	}
	public void walls(Game game){
		Random random = new Random(100);
		for(int i=0;i<1000;i++){
			double xx = random.nextDouble();
			double yy = random.nextDouble();
			double zz = 2;
			
			int xPixel = (int)(xx/zz*height/2+width/2);
			int yPixel = (int)(yy/zz*height/2+height/2);
			
			if(xPixel >= 0 && yPixel >= 0 && xPixel < width && yPixel < height){
						pixels[xPixel+(yPixel)*width] = 0xFFFFF;
			}
		}
	}
	public void renderDistanceLimeter(){
		for(int i=0;i<width*height;i++){
			int colour = pixels[i];
			int brightness = (int)(RENDER_FAR_DISTANCE/zBuffer[i]);
			if(brightness<0){
				brightness = 0;
			}
			if(brightness>255)
				brightness = 255;
			int r = (colour >>16) & 0xff;
			int g = (colour >> 8 ) & 0xff;
			int b = (colour) & 0xff;
			
			r = r * brightness /255;
			g = g * brightness /255;
			b = b * brightness /255;
			
			pixels[i] = r << 16 |  g<< 8 |b;
		}
	}
}
