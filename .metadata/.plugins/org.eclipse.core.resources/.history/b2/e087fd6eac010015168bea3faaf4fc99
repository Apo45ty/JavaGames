/**
 * 
 */
package com.apo45ty.flappy.graphics;

import static org.lwjgl.opengl.GL20.*;

import java.util.*;

import com.apo45ty.flappy.math.*;
import com.apo45ty.flappy.utils.*;

public class Shader {
	
	private final int ID;
	public static final int VERTEX_ATTRIB = 0;
	public static final int TCOORD_ATTRIB = 0;
	private boolean enable = false;
	public static Shader BG;
	
	private Map<String, Integer> locationCache = new HashMap<String, Integer>();
	
	public Shader(String vertex, String fragment) {
		ID = ShaderUtils.load(vertex, fragment);
	}
	
	public static void loadAll(){
		BG = new Shader("shaders/bg.vert","shaders/bg.frag");
	}
	
	public int getUniform(String name){
		//Cache for GPU values
		if(locationCache.containsKey(name)){
			return locationCache.get(name);
		}
		//Fetch the GPU value
		int result = glGetUniformLocation(ID,name);
		if(result == -1){
			System.err.println("Could not find uniform variable"+name+"!");
		} else // store value in cache
			locationCache.put(name, result);
		return result;
	}
	
	public void setUniform1f(String name, float value){
		if(!enable)enable();
		glUniform1f(getUniform(name), value);
	}
	
	public void setUniform2f(String name, float x, float y){
		if(!enable)enable();
		glUniform2f(getUniform(name), x, y);
	}
	
	public void setUniform3f(String name, Vector3f value){
		if(!enable)enable();
		glUniform3f(getUniform(name), value.x,value.y,value.z);
	}
	
	public void setUniformMat4f(String name, Matrix4f value){
		if(!enable)enable();
		glUniformMatrix4fv(getUniform(name), false, value.toFloatBuffer());
	}
	
	public void enable() {
		glUseProgram(ID);
		enable = true;
	}
	
	public void disable() {
		glUseProgram(0);
		enable = false;
	}
	
}
